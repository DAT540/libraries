'***********************************************************************************************************
'			LUIS LIBRARY
'***********************************************************************************************************

include "global.tbh"
'--------------------------------------------------------------------------------
const LUIS_STAMP="LUIS> "
const LUIS_CR_LF=chr(13)+chr(10)
const LUIS_INIT_SIGNATURE=&hB5A4
const LUIS_PLACEHOLDER_STR="####"
'const LUIS_HTML_FILE="luis.html"


'State of html file sending
enum en_luis_html_send_states
	EN_LUIS_HTML_GOP_RESULT,
	EN_LUIS_HTML_SEND_PART1,
	EN_LUIS_HTML_SEND_CONFIG,
	EN_LUIS_HTML_SEND_PART2
end enum

enum en_luis_data_parse_states
	READY,
	LUIS_STX_FOUND,
	LUIS_CR_FOUND
end enum

'--------------------------------------------------------------------------------
declare sub luis_debugprint(byref print_data as string)
declare sub luis_delay_ms(delay as integer)
declare function luis_dot_decimal_to_hex(stored_mac as string) as string

'--------------------------------------------------------------------------------
dim luis_init_flag as word=0
dim luis_GOP_result as string
dim luis_current_send_chunk as string
dim luis_html_placeholder_start as dword
dim luis_html_placeholder_end as dword
dim luis_html_read_pointer as dword
dim luis_html_send_state as en_luis_html_send_states
dim luis_data_parse_state as en_luis_data_parse_states
dim luis_chunk_size as dword
dim luis_bt_cmd_str as string
dim luis_delim as byte

'================================================================================
function luis_start(byref bt_name as string) as en_luis_status_codes
	luis_start=EN_LUIS_STATUS_OK
	if luis_init_flag=LUIS_INIT_SIGNATURE then
		exit function
	end if
	
	
	#if LUIS_DEBUG_PRINT
		luis_debugprint("---START---")
	#endif
		
	bt.name=bt_name
	luis_chunk_size=223
	
	romfile.open(LUIS_HTML_FILE)
	if romfile.pointer32<>1 then
		luis_start=EN_LUIS_FILE_HTML_ERROR
		#if LUIS_DEBUG_PRINT
		luis_debugprint("Failed to open HTML file")
		#endif 
	end if
	dim html_size as integer = romfile.size
	romfile.open(LUIS_CONFIG_FILE)
	if romfile.pointer32<>1 then
		luis_start=EN_LUIS_FILE_CONFIG_ERROR
		#if LUIS_DEBUG_PRINT
		luis_debugprint("Failed to open LUIS file")
		#endif
	end if
	dim config_size as integer = romfile.size
	LUIS_GOP_result="{\x22type\x22:\x22spa\x22,\x22length\x22:"+lstr(html_size + config_size - len(LUIS_PLACEHOLDER_STR))+"}"
	
	if luis_start=EN_LUIS_STATUS_OK then
		luis_init_flag=LUIS_INIT_SIGNATURE
	end if
	
end function

sub luis_on_bt_event(bt_event as enum pl_bt_events)
	if luis_init_flag<>LUIS_INIT_SIGNATURE or wln.enabled=NO then
		exit sub
	end if
	
	select case bt_event 
	
	case PL_BT_EVENT_CONNECTED:
		#if LUIS_DEBUG_PRINT
			luis_debugprint("Device connected")
		#endif
		callback_luis_bt_connected()
	case PL_BT_EVENT_DISCONNECTED:
		#if LUIS_DEBUG_PRINT
			luis_debugprint("Device disconnected")
		#endif
		callback_luis_bt_disconnected()
	case PL_BT_EVENT_ENABLED:
		#if LUIS_DEBUG_PRINT
			luis_debugprint("Bluetooth enabled")
			luis_debugprint("Connect to device named " + bt.name + " from the LUIS mobile app")
		#endif
		callback_luis_bt_enabled()
	case PL_BT_EVENT_DISABLED:
		#if LUIS_DEBUG_PRINT
			luis_debugprint("Bluetooth disabled")
		#endif
		callback_luis_bt_disabled()
	end select
end sub

sub luis_on_bt_data_sent()
	if luis_init_flag<>LUIS_INIT_SIGNATURE then
		#if LUIS_DEBUG_PRINT
			luis_debugprint("got bluetooth data when LUIS not initialized")
		#endif
		exit sub
	end if


	dim chunk_size as dword = luis_chunk_size
	if chunk_size>255 then
		chunk_size=255
	end if
	
	if len(luis_current_send_chunk)<>0 and bt.txfree-bt.newtxlen >=len(luis_current_send_chunk) then
		bt.setdata(luis_current_send_chunk)
		bt.send()
	end if
	
	select case luis_html_send_state
	case EN_LUIS_HTML_GOP_RESULT:
		luis_html_send_state=EN_LUIS_HTML_SEND_PART1
		romfile.open(LUIS_HTML_FILE)
		luis_html_placeholder_start = romfile.find32(0, LUIS_PLACEHOLDER_STR, 0)
		luis_html_placeholder_end = luis_html_placeholder_start + len(LUIS_PLACEHOLDER_STR)
		luis_current_send_chunk=romfile.getdata(chunk_size)
		luis_html_read_pointer=romfile.pointer32
	case EN_LUIS_HTML_SEND_PART1:
		romfile.open(LUIS_HTML_FILE)
		romfile.pointer32=luis_html_read_pointer
		if luis_html_read_pointer+chunk_size > luis_html_placeholder_start then
			chunk_size = luis_html_placeholder_start - luis_html_read_pointer
			luis_html_send_state=EN_LUIS_HTML_SEND_CONFIG
		end if
		luis_current_send_chunk=romfile.getdata(chunk_size)
		if luis_html_send_state<>EN_LUIS_HTML_SEND_PART1 then
			luis_html_read_pointer=1
		else
			luis_html_read_pointer=romfile.pointer32
		end if
	case EN_LUIS_HTML_SEND_CONFIG:
		romfile.open(LUIS_CONFIG_FILE)
		romfile.pointer32=luis_html_read_pointer
		luis_current_send_chunk=romfile.getdata(chunk_size)
		luis_html_read_pointer=romfile.pointer32
		if luis_html_read_pointer>=romfile.size then
			luis_html_send_state=EN_LUIS_HTML_SEND_PART2
			luis_html_read_pointer=luis_html_placeholder_end
		end if
	case EN_LUIS_HTML_SEND_PART2:
		romfile.open(LUIS_HTML_FILE)
		romfile.pointer32=luis_html_read_pointer
		luis_current_send_chunk=romfile.getdata(chunk_size)
		luis_html_read_pointer=romfile.pointer32
	end select
	if len(luis_current_send_chunk) > 0 then
		bt.notifysent(bt.txbuffsize-len(luis_current_send_chunk))
	end if
end sub


function luis_on_bt_data_arrival() as en_luis_status_codes
	dim reply as string
	const LUIS_MAX_CMD_LEN = STG_MAX_SETTING_VALUE_LEN + STG_MAX_SETTING_NAME_LEN + 3
	
	luis_on_bt_data_arrival=EN_LUIS_STATUS_OK
	
	if luis_init_flag<>LUIS_INIT_SIGNATURE then
		luis_on_bt_data_arrival=EN_LUIS_STATUS_NOT_STARTED
		exit function
	end if
	
	select case luis_data_parse_state
	case READY:
	
		luis_bt_cmd_str=bt.getdata(1)
		if luis_bt_cmd_str=chr(LUIS_STX) then
			luis_data_parse_state=LUIS_STX_FOUND
		end if
		
	case LUIS_STX_FOUND:
	
		luis_bt_cmd_str=bt.peekdata(255)
		luis_delim=instr(1,luis_bt_cmd_str,chr(LUIS_CR),1)
		if luis_delim=0 then 
			exit function
		else
			luis_data_parse_state=LUIS_CR_FOUND
		end if
		
	case LUIS_CR_FOUND:
	
		luis_bt_cmd_str=bt.getdata(luis_delim)
		luis_bt_cmd_str=left(luis_bt_cmd_str,len(luis_bt_cmd_str)-1)
        if mid(luis_bt_cmd_str,2,STG_MAX_SETTING_NAME_LEN) = "OP" then
			luis_html_send_state=EN_LUIS_HTML_GOP_RESULT
			luis_current_send_chunk=LUIS_GOP_result
		else
		    reply=stgcmd_proc_cmd(luis_bt_cmd_str)
		end if
        if reply<>"" then
			bt.setdata(reply)
			bt.send()
			luis_bt_cmd_str=""
		else 
			bt.notifysent(bt.txbuffsize-len(luis_current_send_chunk))
		end if
		luis_data_parse_state=READY

	end select

end function

#if LUIS_DEBUG_PRINT
sub luis_debugprint(byref print_data as string)
	sys.debugprint(LUIS_STAMP+print_data+LUIS_CR_LF)
end sub
#endif

sub luis_delay_ms(delay as integer)
	dim end_time as dword=sys.timercountms+delay
	while sys.timercountms<end_time
	wend
end sub

sub luis_stop()
	luis_init_flag=0
end sub

sub on_bt_overrun()
	sys.debugprint("Overflow\r\n")
end sub