include "global.tbh"

dim upload_started as boolean = false
dim current_fw_upg_state as pl_upg_state_t
dim isBtConnected as boolean = false
dim pattern_timer as dword = sys.timercount32
dim led_detect_timer as byte
dim firmware_upgrader_buffer as string=""
dim firmware_upgrader_buffer2 as string=""
dim firmware_upgrader_start_called as boolean=false


sub firmware_upgrader_add_to_buffer(byref data as string)
	
	if len(firmware_upgrader_buffer) + len(data) > 255 then
		firmware_upgrader_buffer2=right(data,len(firmware_upgrader_buffer))
		firmware_upgrader_buffer = firmware_upgrader_buffer + left(data, len(data) - len(firmware_upgrader_buffer))
	else
		firmware_upgrader_buffer = firmware_upgrader_buffer + data
	end if
	
end sub

function firmware_upgrader_get_data(length as byte) as string

	firmware_upgrader_get_data = left(firmware_upgrader_buffer, length)
	firmware_upgrader_buffer=right(firmware_upgrader_buffer,len(firmware_upgrader_buffer)-length)
	if len(firmware_upgrader_buffer2) > 0 then
		firmware_upgrader_buffer=firmware_upgrader_buffer + left(firmware_upgrader_buffer2,length)
		
		if length > len(firmware_upgrader_buffer2) then
			firmware_upgrader_buffer2 = ""
		else
			firmware_upgrader_buffer2 = right(firmware_upgrader_buffer2,len(firmware_upgrader_buffer2) - length)
		end if
	end if
	
	if len(firmware_upgrader_get_data) < length then
		firmware_upgrader_get_data = ""
	end if

end function

sub device_firmware_init(source as PL_FW_UPG_SOURCE, number as byte)
	dim i as integer 
 
	current_fw_upg_state.source  = source
	current_fw_upg_state.source_num = number
	current_fw_upg_state.state=PL_FW_READ_HEADER
	current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_NONE
	current_fw_upg_state.fw_numfiles  = 0
	current_fw_upg_state.fw_receivedfiles  = 0	
	for i = 0 TO MAX_NUM_FILE_UPG - 1 
		current_fw_upg_state.fw_types(i) = 0
		current_fw_upg_state.fw_lengths(i) = 0
		current_fw_upg_state.fw_checksums(i) = 0
	next i
	current_fw_upg_state.fw_currentfile = 0
	current_fw_upg_state.fw_total_percent = 0
	current_fw_upg_state.fw_percent = 0
	current_fw_upg_state.fw_remaining = 0 
	current_fw_upg_state.fw_sector =  0
	current_fw_upg_state.fw_page  = 0
	current_fw_upg_state.fw_checksum =0 	
	current_fw_upg_state.fw_total_remaining=0
	
end sub

function hex_mac(mac as string) as string
	dim i as integer = 0
	dim startpos as integer = 1
	dim endpos as integer = 0
	dim num as word = ""
	dim result as string = ""
	
	for i = 0 to 5
		endpos = instr(startpos,mac,".",0)
		num = val(  mid(mac,startpos,  endpos-startpos) )
		if num<>0 then
			result = result + right(hex( num ),2) + ":"
		else
			result = result + "00" + ":"
		end if
		startpos=endpos+1
	next i

	hex_mac = left(result,len(result)-1)

end function

function device_firmware_read_32_uint() as dword
	dim l as byte(4)
	dim s as string
	l=firmware_upgrader_get_data(4)
	device_firmware_read_32_uint =  l(0) + (l(1) shl 8) + (l(2) shl 16)  + (l(3) shl 24) 
	
end function

sub on_firmware_update_complete(byref current_fw_upg_state as pl_upg_state_t)	

	'''UPDATE THE PAGE WITH MANIFEST INFO 
	'''PARSE MANIGFEST HERE
	
	sys.debugprint("All files have been downloaded.\r\n")
	
	dim i as integer
	dim module_type as pl_wln_module_types
	
	if current_fw_upg_state.fw_fail_reason <> PL_FW_FAIL_NONE then
		sys.debugprint("There was a failure return this to the browser.\r\n")
	end if
	
	sys.debugprint("All files have been downloaded.\r\n")

	dim upg_state as pl_upg_state_t=get_fw_upg_state()
	if upg_state.state <> PL_FW_UPG_COMPLETE then
		exit sub
	end if
	
	pat.play("B~", PL_PAT_CANINT)
	
	i =  get_firmware_index(UNCOMPRESSED_TIOS_APP)  
	if i >= 0  then 
	   fd.copyfirmware(current_fw_upg_state.fw_lengths(i)/256+1)
	end if
	
	i=  get_firmware_index(COMPRESSED_TIOS_APP) 
	if i >= 0  then 
		fd.copyfirmwarelzo(YES)
	end if
	
	i =  get_firmware_index(UNCOMPRESSED_TIOS)  
	if i >= 0  then 
		fd.copyfirmware(current_fw_upg_state.fw_lengths(i)/256+1)
	end if
	
	i =  get_firmware_index(TIOS_MON)  
	if i >= 0  then 
		'fd.copymonitor()
	end if
	
	sys.reboot()
	
end sub


sub device_firmware_get_fw_block(byref dev_fw_upg_state as pl_upg_state_t )
	dim fw as string
	dim percent_complete, total_percent as byte
	dim i as dword
	if dev_fw_upg_state.fw_remaining >= FW_UPG_BLK_LEN then   'We have remaining pages for the firmware update
		if len(firmware_upgrader_buffer) + len(firmware_upgrader_buffer2) >= FW_UPG_BLK_LEN then			
			fw=firmware_upgrader_get_data(FW_UPG_BLK_LEN)
		end if
	else 'Last block of firmware data
		if len(firmware_upgrader_buffer) + len(firmware_upgrader_buffer2) >= dev_fw_upg_state.fw_remaining then					
			fw=firmware_upgrader_get_data(dev_fw_upg_state.fw_remaining)
		end if 
	end if 
	
	if len(fw) > 0  then 
		dim csdata(128) as byte = fw		
		dev_fw_upg_state.fw_remaining = dev_fw_upg_state.fw_remaining - len(fw)
		dev_fw_upg_state.fw_total_remaining = dev_fw_upg_state.fw_total_remaining - len(fw)
		for i = 0 To len(fw)-1
			 dev_fw_upg_state.fw_checksum  = dev_fw_upg_state.fw_checksum + csdata(i) 
		next i
		
		select case dev_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile)
		case COMPRESSED_TIOS_APP,UNCOMPRESSED_TIOS_APP,UNCOMPRESSED_TIOS:
			device_firmware_write_tios_app( fw)
			dev_fw_upg_state.fw_page = dev_fw_upg_state.fw_page + 1
		case WA2000_MON:
			device_firmware_write_wa2000_mon_app( fw)
		case WA2000_APP:
			device_firmware_write_wa2000_mon_app( fw)
		end select
		
		percent_complete = 100 - 100 * (dev_fw_upg_state.fw_remaining/dev_fw_upg_state.fw_lengths(dev_fw_upg_state.fw_currentfile))
		total_percent = 100 - (100 * dev_fw_upg_state.fw_total_remaining/dev_fw_upg_state.fw_totalsize)
		if percent_complete > dev_fw_upg_state.fw_percent or total_percent > dev_fw_upg_state.fw_total_percent then
			dev_fw_upg_state.fw_percent  = percent_complete
			dev_fw_upg_state.fw_total_percent = total_percent
'			callback_firmware_upgrade_percent_change(dev_fw_upg_state.fw_percent)
		end if
	
	end if
	if dev_fw_upg_state.fw_remaining = 0 then
   
		dev_fw_upg_state.fw_checksum  = not dev_fw_upg_state.fw_checksum 
		dev_fw_upg_state.fw_checksum = dev_fw_upg_state.fw_checksum + 1

		if dev_fw_upg_state.fw_checksum<>dev_fw_upg_state.fw_checksums(dev_fw_upg_state.fw_currentfile) then
			dev_fw_upg_state.fw_fail_reason=PL_FW_FAIL_INVALID_FW_CHECKSUM
			dev_fw_upg_state.state=PL_FW_UPG_FAIL
			exit sub
		end if
		dev_fw_upg_state.fw_checksum=0
		firmware_upgrader_start_called=false
'		on_firmware_update_file_complete(dev_fw_upg_state)
		dev_fw_upg_state.fw_numfiles = dev_fw_upg_state.fw_numfiles - 1
		dev_fw_upg_state.fw_currentfile = dev_fw_upg_state.fw_currentfile + 1
		if dev_fw_upg_state.fw_numfiles=0 then 
			dev_fw_upg_state.state=PL_FW_UPG_COMPLETE
			on_firmware_update_complete(dev_fw_upg_state)
		else
			dev_fw_upg_state.state=PL_FW_UPG_READ_FW_TYPE
			dev_fw_upg_state.fw_percent=0
		end if
	 
	end if		
end sub

sub device_firmware_read_header()	
	
	if len(firmware_upgrader_buffer) >= 8 then	
		current_fw_upg_state.fw_numfiles = device_firmware_read_32_uint()
		current_fw_upg_state.fw_totalsize = device_firmware_read_32_uint()
		current_fw_upg_state.fw_total_remaining = current_fw_upg_state.fw_totalsize
		if current_fw_upg_state.fw_numfiles > 0 then
			current_fw_upg_state.state = PL_FW_UPG_READ_FW_TYPE		
		else 
			current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_NUMFILES
			current_fw_upg_state.state = PL_FW_UPG_FAIL
			on_firmware_update_complete(current_fw_upg_state)
		end if
	end if
	
end sub

sub device_firmware_read_fw_type()

	dim l as byte(4)
	if len(firmware_upgrader_buffer) >=4 then	
		current_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile) = device_firmware_read_32_uint()	
		
		#if PLATFORM_ID <> WM2000
		select case current_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile)
		case WA2000_MON:
			wln.setupgraderegion(PL_WLN_UPGRADE_REGION_MONITOR)
		case WA2000_APP:			
			wln.setupgraderegion(PL_WLN_UPGRADE_REGION_MAIN)
		case else:
			
		end select		
		#endif

		if current_fw_upg_state.fw_types(current_fw_upg_state.fw_currentfile) <= MANIFEST then
			current_fw_upg_state.state = PL_FW_UPG_READ_LEN						
		else 
			current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_INVALID_FW_TYPE
			current_fw_upg_state.state = PL_FW_UPG_FAIL
			on_firmware_update_complete(current_fw_upg_state)
		end if
	end if
	
end sub

sub device_firmware_read_fw_length()

	dim l as byte(4)
	if len(firmware_upgrader_buffer)  >= 4 then
		current_fw_upg_state.fw_remaining = device_firmware_read_32_uint()	
		if current_fw_upg_state.fw_remaining  > 0 then
			current_fw_upg_state.fw_lengths(current_fw_upg_state.fw_currentfile) = current_fw_upg_state.fw_remaining
			current_fw_upg_state.state = PL_FW_UPG_READ_CHECKSUM	
		else 
			current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_INVALID_FW_LENGTH
			current_fw_upg_state.state = PL_FW_UPG_FAIL
			on_firmware_update_complete(current_fw_upg_state)
		end if
	end if
	
end sub

sub device_firmware_read_checksum()	

	dim l as byte(4)
	if len(firmware_upgrader_buffer) >= 4 then
		current_fw_upg_state.fw_checksums(current_fw_upg_state.fw_currentfile) = device_firmware_read_32_uint()		 
		current_fw_upg_state.state = PL_FW_UPG_READ_FW
	end if
	
end sub

#if FD_SECTOR_SIZE=256

sub device_firmware_write_tios_app(fw as string) 
	fd.buffernum=0
	dim fw_buffer as string
	if (current_fw_upg_state.fw_page mod 2 ) = 0 then
		if current_fw_upg_state.fw_remaining=0 then
			fw=fw+strgen(FW_UPG_BLK_LEN-len(fw),"\x00")
			fw_buffer=fw
			fw=""
			goto set_sector
		else
			fw_buffer=fw
		end if
	else 
set_sector:
		if current_fw_upg_state.fw_remaining=0 then
			fw=fw+strgen(FW_UPG_BLK_LEN-len(fw),"\x00")
		end if
		fd.flush()
		fd.setbuffer(fw_buffer , 0)
		fd.setbuffer(fw, 256) 	
		 
		fd.setsector(current_fw_upg_state.fw_sector)			 				
		current_fw_upg_state.fw_sector = current_fw_upg_state.fw_sector + 1
	end if

end sub

#elif FD_SECTOR_SIZE=512

dim fw_buffer(4) as string(128)
dim fw_buffer2(4) as string(128)


sub device_firmware_write_tios_app(fw as string) 
	fd.buffernum=0
	
	dim i as byte = current_fw_upg_state.fw_page mod 4
	dim lastWrite as boolean = (current_fw_upg_state.fw_remaining=0)
	
	if lastWrite then
		fw=fw+strgen(FW_UPG_BLK_LEN-len(fw),"\x00")
	end if
	
	fw_buffer(i)=fw
	
	if i = 3 or lastWrite then
		fd.flush
		fd.setbuffer(fw_buffer(0) , 0)
		fd.setbuffer(fw_buffer(1), 128) 	
		fd.setbuffer(fw_buffer(2), 256) 	
		fd.setbuffer(fw_buffer(3), 384) 
		if fd.setsector(current_fw_upg_state.fw_sector) <> PL_FD_STATUS_OK then
			sys.halt
		end if
			
		if fd.getsector(current_fw_upg_state.fw_sector) <> PL_FD_STATUS_OK then
			sys.halt
		end if
		fw_buffer2(0) = fd.getbuffer(0,128)
		fw_buffer2(1) = fd.getbuffer(128,128)
		fw_buffer2(2) = fd.getbuffer(256,128)
		fw_buffer2(3) = fd.getbuffer(384,128)

		if fw_buffer2(0) <> fw_buffer(0) or
			fw_buffer2(1) <> fw_buffer(1) or
			fw_buffer2(2) <> fw_buffer(2) or
			fw_buffer2(3) <> fw_buffer(3) then 
			sys.halt
		end if

		current_fw_upg_state.fw_sector = current_fw_upg_state.fw_sector + 1
		fw_buffer(0)= ""
		fw_buffer(1)= ""
		fw_buffer(2)= ""
		fw_buffer(3)= ""
	end if	

end sub

#endif

sub device_firmware_write_wa2000_mon_app(fw as string) 			
	#if PLATFORM_ID <> WM2000
	wln.writeflashpage(fw)	
	#endif
end sub

sub firmware_upgrader_start()
	if firmware_upgrader_start_called=true then		
		exit sub
	else
		firmware_upgrader_start_called=true
	end if	
	dim i as byte
	current_fw_upg_state.state=PL_FW_READ_HEADER
	current_fw_upg_state.fw_fail_reason = PL_FW_FAIL_NONE
	current_fw_upg_state.fw_numfiles  = 0
	current_fw_upg_state.fw_receivedfiles  = 0	
	for i = 0 TO MAX_NUM_FILE_UPG - 1 
		current_fw_upg_state.fw_types(i) = 0
		current_fw_upg_state.fw_lengths(i) = 0
		current_fw_upg_state.fw_checksums(i) = 0
	next i
	current_fw_upg_state.fw_currentfile = 0
	current_fw_upg_state.fw_total_percent = 0
	current_fw_upg_state.fw_percent = 0
	current_fw_upg_state.fw_remaining = 0 
	current_fw_upg_state.fw_sector =  0
	current_fw_upg_state.fw_page  = 0
	current_fw_upg_state.fw_checksum =0 	
	current_fw_upg_state.fw_total_remaining=0
end sub

function device_firmware_upload_update(data as string) as no_yes
	
	if device_firmware_upload_update = NO then
		device_firmware_upload_update = YES
	end if
	
	firmware_upgrader_add_to_buffer(data)
	dim prev_buffer_len as dword = 0
	
	while len(firmware_upgrader_buffer) + len(firmware_upgrader_buffer2)<>prev_buffer_len

		prev_buffer_len=len(firmware_upgrader_buffer) + len(firmware_upgrader_buffer2)

		select case current_fw_upg_state.state
			case PL_FW_READ_HEADER:
				device_firmware_read_header()
			case PL_FW_UPG_READ_FW_TYPE:
				device_firmware_read_fw_type()
			case PL_FW_UPG_READ_LEN:
				device_firmware_read_fw_length()
			case PL_FW_UPG_READ_CHECKSUM:
				device_firmware_read_checksum()
			case PL_FW_UPG_READ_FW:
				device_firmware_get_fw_block(current_fw_upg_state)
			case PL_FW_UPG_FAIL:
				on_firmware_update_complete(current_fw_upg_state)
				firmware_upgrader_start_called=false
				device_firmware_upload_update = NO 
			case PL_FW_UPG_CANCEL:
				on_firmware_update_complete(current_fw_upg_state)
				firmware_upgrader_start_called=false
				device_firmware_upload_update = NO 
		end select	
	wend
end function

function get_fw_upg_state() as pl_upg_state_t 

	get_fw_upg_state=current_fw_upg_state
	
end function

function get_firmware_index(fwtype as PL_UPG_FW_TYPE) as integer
	dim i as integer
	for i=0 to MAX_NUM_FILE_UPG-1
		if current_fw_upg_state.fw_types(i)=fwtype then
			get_firmware_index = i
			exit function
		end if
	next i
	get_firmware_index = -1
end function 